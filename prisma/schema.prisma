generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int                @id @default(autoincrement())
  firstName      String?
  lastName       String?
  username       String?            @unique
  email          String?            @unique
  password       String?
  profilePicture String?
  bio            String?
  provider       UserType           @default(NORMAL)
  socialId       String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  isDeleted      Boolean            @default(false)
  isActived      Boolean            @default(true)
  refreshToken   String?
  role           UserRole           @default(USER)
  communities    Community[]        @relation("Creator")
  posts          Post[]
  comments       Comment[]
  votes          Vote[]
  subscriptions  Subscription[]
  savedPosts     SavedPost[]
  notifications  UserNotification[]
}

model Community {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  description       String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isDeleted         Boolean        @default(false)
  isActived         Boolean        @default(true)
  creatorId         Int
  subscriptionCount Int            @default(0)
  creator           User           @relation("Creator", fields: [creatorId], references: [id])
  posts             Post[]
  subscriptions     Subscription[]
}

model Post {
  id          Int         @id @default(autoincrement())
  title       String
  content     String?
  url         String?
  imageUrl    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isDeleted   Boolean     @default(false)
  userId      Int
  isActived   Boolean     @default(true)
  upvotes     Int         @default(0)
  downvotes   Int         @default(0)
  communityId Int
  user        User        @relation(fields: [userId], references: [id])
  community   Community   @relation(fields: [communityId], references: [id])
  comments    Comment[]
  votes       Vote[]
  savedPost   SavedPost[]
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isDeleted       Boolean   @default(false)
  userId          Int
  postId          Int
  isActived       Boolean   @default(true)
  parentCommentId Int?
  upvotes         Int       @default(0)
  downvotes       Int       @default(0)
  user            User      @relation(fields: [userId], references: [id])
  post            Post      @relation(fields: [postId], references: [id])
  parentComment   Comment?  @relation("CommentHierarchy", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentHierarchy")
  votes           Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int?
  commentId Int?
  voteType  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
}

model Subscription {
  id          Int       @id @default(autoincrement())
  userId      Int
  communityId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  isActived   Boolean   @default(true)
  user        User      @relation(fields: [userId], references: [id])
  community   Community @relation(fields: [communityId], references: [id])
}

model SavedPost {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model UserNotification {
  id        Int      @id @default(autoincrement())
  userId    Int
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  isActived Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum UserType {
  NORMAL
  GOOGLE
  FACEBOOK
  X
  GITHUB
}
